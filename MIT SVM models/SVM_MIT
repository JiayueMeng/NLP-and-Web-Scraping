{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "c65e13f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras import layers\n",
    "import tensorflow.keras\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "from sklearn import metrics\n",
    "import math\n",
    "from math import log\n",
    "import numpy as np \n",
    "import matplotlib \n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers\n",
    "import tensorflow.keras\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "c85bbf13",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is the result for testing between Physics and History apartment of MIT. The dataset has a total size of 150,\n",
    "#while 33 is form History and 117 is from Physics.\n",
    "#We chose 20 words that matters the most to form the dataset, and label data from History as \"1\", data from Physics as \"2\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "db056d05",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is the part to do some basic process about the dataset. For the firt 33 rows, which is the data from history,\n",
    "#add in a label \"1\". And for the following 117 rows, which is the data from Physics, add in a label \"2\".\n",
    "#Then, to merge the two datasets (History + Physics) to get the final dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "42c112ab",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>physics</th>\n",
       "      <th>mit</th>\n",
       "      <th>theory</th>\n",
       "      <th>research</th>\n",
       "      <th>experiment</th>\n",
       "      <th>quantum</th>\n",
       "      <th>show</th>\n",
       "      <th>submenu</th>\n",
       "      <th>history</th>\n",
       "      <th>science</th>\n",
       "      <th>...</th>\n",
       "      <th>programs</th>\n",
       "      <th>graduate</th>\n",
       "      <th>astrophysics</th>\n",
       "      <th>particle</th>\n",
       "      <th>university</th>\n",
       "      <th>professor</th>\n",
       "      <th>team</th>\n",
       "      <th>students</th>\n",
       "      <th>awards</th>\n",
       "      <th>output</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>3.413149</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>0.537982</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>118.513333</td>\n",
       "      <td>-1.091528</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.161455</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.525049</td>\n",
       "      <td>-1.161455</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>31.835494</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>3.278498</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>29.901085</td>\n",
       "      <td>3.278498</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>3.278498</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-42.514991</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-21.337186</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-42.196355</td>\n",
       "      <td>-21.337186</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-21.337186</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>21.564317</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.111990</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>19.941156</td>\n",
       "      <td>-0.111990</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.111990</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-9.156491</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-13.741338</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.027377</td>\n",
       "      <td>-8.501879</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-8.501879</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-4.920864</td>\n",
       "      <td>-11.616880</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>171.000451</td>\n",
       "      <td>32.023587</td>\n",
       "      <td>28.655156</td>\n",
       "      <td>23.953385</td>\n",
       "      <td>24.707774</td>\n",
       "      <td>4.584869</td>\n",
       "      <td>19.672668</td>\n",
       "      <td>19.672668</td>\n",
       "      <td>0.842137</td>\n",
       "      <td>20.356881</td>\n",
       "      <td>...</td>\n",
       "      <td>11.321754</td>\n",
       "      <td>8.894840</td>\n",
       "      <td>4.584869</td>\n",
       "      <td>11.842224</td>\n",
       "      <td>0.374290</td>\n",
       "      <td>3.368484</td>\n",
       "      <td>7.579042</td>\n",
       "      <td>7.579042</td>\n",
       "      <td>5.263237</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>158.977662</td>\n",
       "      <td>40.240333</td>\n",
       "      <td>30.807776</td>\n",
       "      <td>14.483822</td>\n",
       "      <td>80.292300</td>\n",
       "      <td>4.926884</td>\n",
       "      <td>21.149084</td>\n",
       "      <td>21.149084</td>\n",
       "      <td>0.903974</td>\n",
       "      <td>27.386954</td>\n",
       "      <td>...</td>\n",
       "      <td>12.169919</td>\n",
       "      <td>9.560558</td>\n",
       "      <td>4.926884</td>\n",
       "      <td>22.633080</td>\n",
       "      <td>1.607815</td>\n",
       "      <td>3.619270</td>\n",
       "      <td>8.145886</td>\n",
       "      <td>8.145886</td>\n",
       "      <td>9.076422</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>169.940723</td>\n",
       "      <td>28.799121</td>\n",
       "      <td>28.799121</td>\n",
       "      <td>25.600516</td>\n",
       "      <td>39.524349</td>\n",
       "      <td>4.602001</td>\n",
       "      <td>25.600516</td>\n",
       "      <td>19.768011</td>\n",
       "      <td>0.842875</td>\n",
       "      <td>32.185962</td>\n",
       "      <td>...</td>\n",
       "      <td>11.372893</td>\n",
       "      <td>8.933460</td>\n",
       "      <td>4.602001</td>\n",
       "      <td>21.155549</td>\n",
       "      <td>0.373681</td>\n",
       "      <td>45.522256</td>\n",
       "      <td>11.372893</td>\n",
       "      <td>7.610977</td>\n",
       "      <td>5.283657</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>233.969978</td>\n",
       "      <td>39.372299</td>\n",
       "      <td>26.660805</td>\n",
       "      <td>13.394525</td>\n",
       "      <td>13.394525</td>\n",
       "      <td>3.346835</td>\n",
       "      <td>14.368627</td>\n",
       "      <td>14.368627</td>\n",
       "      <td>1.706836</td>\n",
       "      <td>2.885553</td>\n",
       "      <td>...</td>\n",
       "      <td>11.548884</td>\n",
       "      <td>6.494996</td>\n",
       "      <td>3.346835</td>\n",
       "      <td>11.548884</td>\n",
       "      <td>2.458459</td>\n",
       "      <td>2.458459</td>\n",
       "      <td>5.533843</td>\n",
       "      <td>11.548884</td>\n",
       "      <td>2.458459</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>145.720892</td>\n",
       "      <td>29.769527</td>\n",
       "      <td>215.005603</td>\n",
       "      <td>10.717530</td>\n",
       "      <td>14.587506</td>\n",
       "      <td>6.368406</td>\n",
       "      <td>15.648023</td>\n",
       "      <td>15.648023</td>\n",
       "      <td>0.670080</td>\n",
       "      <td>5.377630</td>\n",
       "      <td>...</td>\n",
       "      <td>9.005798</td>\n",
       "      <td>10.275643</td>\n",
       "      <td>3.647241</td>\n",
       "      <td>6.028845</td>\n",
       "      <td>1.191115</td>\n",
       "      <td>10.717530</td>\n",
       "      <td>6.028845</td>\n",
       "      <td>6.028845</td>\n",
       "      <td>4.186828</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>149 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        physics        mit      theory   research  experiment   quantum  \\\n",
       "0     -0.000000   3.413149   -0.000000   0.537982   -0.000000 -0.000000   \n",
       "1     -0.000000  31.835494   -0.000000   3.278498   -0.000000 -0.000000   \n",
       "2     -0.000000 -42.514991   -0.000000 -21.337186   -0.000000 -0.000000   \n",
       "3     -0.000000  21.564317   -0.000000  -0.111990   -0.000000 -0.000000   \n",
       "4     -0.000000  -9.156491   -0.000000 -13.741338   -0.000000 -0.000000   \n",
       "..          ...        ...         ...        ...         ...       ...   \n",
       "144  171.000451  32.023587   28.655156  23.953385   24.707774  4.584869   \n",
       "145  158.977662  40.240333   30.807776  14.483822   80.292300  4.926884   \n",
       "146  169.940723  28.799121   28.799121  25.600516   39.524349  4.602001   \n",
       "147  233.969978  39.372299   26.660805  13.394525   13.394525  3.346835   \n",
       "148  145.720892  29.769527  215.005603  10.717530   14.587506  6.368406   \n",
       "\n",
       "          show    submenu     history    science  ...   programs   graduate  \\\n",
       "0    -0.000000  -0.000000  118.513333  -1.091528  ...  -0.000000  -1.161455   \n",
       "1    -0.000000  -0.000000   29.901085   3.278498  ...  -0.000000   3.278498   \n",
       "2    -0.000000  -0.000000  -42.196355 -21.337186  ...  -0.000000 -21.337186   \n",
       "3    -0.000000  -0.000000   19.941156  -0.111990  ...  -0.000000  -0.111990   \n",
       "4    -0.000000  -0.000000   -0.027377  -8.501879  ...  -0.000000  -8.501879   \n",
       "..         ...        ...         ...        ...  ...        ...        ...   \n",
       "144  19.672668  19.672668    0.842137  20.356881  ...  11.321754   8.894840   \n",
       "145  21.149084  21.149084    0.903974  27.386954  ...  12.169919   9.560558   \n",
       "146  25.600516  19.768011    0.842875  32.185962  ...  11.372893   8.933460   \n",
       "147  14.368627  14.368627    1.706836   2.885553  ...  11.548884   6.494996   \n",
       "148  15.648023  15.648023    0.670080   5.377630  ...   9.005798  10.275643   \n",
       "\n",
       "     astrophysics   particle  university  professor       team   students  \\\n",
       "0       -0.000000  -0.000000   -0.525049  -1.161455  -0.000000  -0.000000   \n",
       "1       -0.000000  -0.000000   -0.000000  -0.000000  -0.000000  -0.000000   \n",
       "2       -0.000000  -0.000000   -0.000000  -0.000000  -0.000000  -0.000000   \n",
       "3       -0.000000  -0.000000   -0.000000  -0.000000  -0.000000  -0.000000   \n",
       "4       -0.000000  -0.000000   -4.920864 -11.616880  -0.000000  -0.000000   \n",
       "..            ...        ...         ...        ...        ...        ...   \n",
       "144      4.584869  11.842224    0.374290   3.368484   7.579042   7.579042   \n",
       "145      4.926884  22.633080    1.607815   3.619270   8.145886   8.145886   \n",
       "146      4.602001  21.155549    0.373681  45.522256  11.372893   7.610977   \n",
       "147      3.346835  11.548884    2.458459   2.458459   5.533843  11.548884   \n",
       "148      3.647241   6.028845    1.191115  10.717530   6.028845   6.028845   \n",
       "\n",
       "       awards  output  \n",
       "0   -0.000000       1  \n",
       "1   -0.000000       1  \n",
       "2   -0.000000       1  \n",
       "3   -0.000000       1  \n",
       "4   -0.000000       1  \n",
       "..        ...     ...  \n",
       "144  5.263237       2  \n",
       "145  9.076422       2  \n",
       "146  5.283657       2  \n",
       "147  2.458459       2  \n",
       "148  4.186828       2  \n",
       "\n",
       "[149 rows x 21 columns]"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smalltest = pd.read_csv(\"MITtest.csv\") #Import the dataset.\n",
    "smalltest.drop(index = 149, inplace=True)\n",
    "smalltest = smalltest.drop('Unnamed: 0', axis = 1)\n",
    "filt = smalltest.iloc[0:32] #Get the first 33 rows (data for History)\n",
    "filt['output'] = [1 for row in range(len(filt))] #Add in a label \"1\" for the first 33 rows\n",
    "filt2 = smalltest.iloc[32:149] #Get the next 117 rows (data for Physics)\n",
    "filt2['output'] = [2 for row in range(len(filt2))] #Add in a label \"2\" for the next 117 rows\n",
    "smalltest = pd.merge(filt, filt2, how = 'outer') #Merge the two datasets for History and Physics\n",
    "smalltest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "4eb5cd23",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is the part to separate training set and testing set. I would pick a size of 15 as testing set, which includes\n",
    "#5 data from History and 10 data from Physics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "fcb62e22",
   "metadata": {},
   "outputs": [],
   "source": [
    "#testing set\n",
    "test_x = smalltest.iloc[27:42] #I would directly pick row 27 to row 41 a teting set.\n",
    "test_y = np.array(test_x['output'])\n",
    "test_x = test_x.drop('output', axis = 1)\n",
    "test_x = np.array(test_x)\n",
    "#training set\n",
    "train_x_1 = smalltest.iloc[0:27] #The training set would then be row 0-26, and row 42-149. Merge then to get the training set.\n",
    "train_x_2 = smalltest.iloc[42:149]\n",
    "train_x = pd.merge(train_x_1, train_x_2, how = 'outer')\n",
    "train_y = np.array(train_x['output'])\n",
    "train_x = train_x.drop('output', axis = 1)\n",
    "train_x = np.array(train_x)\n",
    "train_y = np.array(train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "9deaa1a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55b36997",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is the part for SVM. We used the function .SVC directly since it's convenient and powerful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "a98b1bcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#SVM\n",
    "from sklearn import svm\n",
    "from sklearn import datasets\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.datasets import make_blobs\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c321c15a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#For kernel function, we just pick \"linear\". We found out that the accuracy of linear function is already 100%,\n",
    "#and we don't think we need to make the model more complicated by choosing another kernel function while linear function \n",
    "#can already work really well. For C, we just pick 100. We tried to test different C, like 0.01, 1, 100, 10000, but \n",
    "#there isn't much difference in the result. Therefore, we just picked 100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "eb411257",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lin = svm.SVC(kernel = 'linear', C = 100)\n",
    "lin.fit(train_x, train_y)\n",
    "predict = lin.predict(test_x)\n",
    "acc_num = sum(predict == test_y)\n",
    "acc_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b75bbbdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is the part to show final result. Predict shows the array of predicted result. \n",
    "#Accuracy show the percentage of accuracy.\n",
    "#confusion_matrix would draw a confusion matrix which represents our result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "f34949d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predict: [1 1 1 1 1 2 2 2 2 2 2 2 2 2 2]\n",
      "Accuracy: 1.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[ 5,  0],\n",
       "       [ 0, 10]])"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Predict:\", predict)\n",
    "print(\"Accuracy:\" , acc_num/15)\n",
    "confusion_matrix(test_y, predict)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
